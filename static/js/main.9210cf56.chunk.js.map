{"version":3,"sources":["components/Search/Search.js","components/Result/Result.js","components/Results/Results.js","components/Popup/Popup.js","App/App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Results","results","console","log","map","key","Popup","selected","closePopup","Year","imdbRating","Director","Actors","Plot","App","useState","s","state","setState","apiUrl","apiKeys","omdbKeys","databaseURL","e","target","value","prevState","length","axios","then","data","undefined","alert","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9210cf56.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Search({ handleInput, search }) {\n  return (\n    <section className=\"searchbox-wrap\">\n      <input\n        type=\"text\"\n        placeholder=\"Search for a movie and then press enter...\"\n        className=\"searchbox\"\n        onChange={handleInput}\n        onKeyPress={search}\n        />\n    </section>\n  );\n}\n\nexport default Search;\n","import React from 'react';\n\nfunction Result({ result, openPopup }) {\n  return (\n    <div className=\"result\" onClick={() => openPopup(result.imdbID)}>\n      <img src={result.Poster} alt={result.Title}/>\n      <h3>{result.Title}</h3>\n    </div>\n  );\n}\n\nexport default Result;\n","import React from 'react';\nimport Result from '../Result/Result';\n\nfunction Results({ results, openPopup }) {\n  console.log(results);\n  return (\n    <section className=\"results\">\n      {results.map((result) => (\n        <Result key={result.imdbID} result={result} openPopup={openPopup} />\n      ))}\n    </section>\n  );\n}\n\nexport default Results;\n","import React from 'react';\n\nfunction Popup({ selected, closePopup }) {\n  console.log(selected);\n  return (\n    <section className=\"popup\">\n      <div className=\"content\">\n        <h2>{selected.Title} <span>({ selected.Year })</span></h2>\n        <p className=\"rating\">IMDB Rating: {selected.imdbRating}</p>\n        <div className=\"plot\">\n          <img src={selected.Poster} alt={selected.Title}/>\n          <div className=\"text\">\n            <p>Directed by: {selected.Director}</p>\n            <p>Starring: {selected.Actors}</p>\n            <p>{selected.Plot}</p>\n          </div>\n        </div>\n        <div className=\"closeBtn\">\n        <button className=\"close\" onClick={closePopup}>Close</button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Popup;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Search from '../components/Search/Search';\nimport Results from '../components/Results/Results';\nimport Popup from '../components/Popup/Popup';\n\nimport apiKeys from '../helpers/apiKeys.json';\n\nfunction App() {\n  const [state, setState] = useState({\n    s: '',\n    results: [],\n    selected: {},\n  });\n\n  const apiUrl = apiKeys.omdbKeys.databaseURL;\n\n  const search = (e) => {\n    const s = e.target.value;\n    if (e.key === 'Enter' && s.length !== 0) {\n      axios(`${apiUrl}&s=${state.s}`).then(({ data }) => {\n        if (data.Search === undefined || 0) {\n          alert('Please enter a legitimate search');\n        } else {\n          const result = data.Search;\n          setState((prevState) => ({ ...prevState, results: result }));\n        }\n      });\n    }\n  };\n\n  const handleInput = (e) => {\n    const s = e.target.value;\n    setState((prevState) => ({ ...prevState, s }));\n  };\n\n  const openPopup = (id) => {\n    axios(`${apiUrl}&i=${id}`).then(({ data }) => {\n      const result = data;\n      setState((prevState) => ({ ...prevState, selected: result }));\n    });\n  };\n\n  const closePopup = () => {\n    setState((prevState) => ({ ...prevState, selected: {} }));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1><span>React Movie Database</span></h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search}/>\n        <Results results={state.results} openPopup={openPopup}/>\n\n        {(typeof state.selected.Title != 'undefined')\n          ? <Popup selected={state.selected} closePopup={closePopup} />\n          : false}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}